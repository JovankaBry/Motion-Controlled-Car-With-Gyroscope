#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Wire.h>
#include <MPU6050_light.h>
#include <U8g2lib.h>

// NRF24 Setup
RF24 radio(7, 8); // CE, CSN for Uno/Nano
const byte address[6] = "00001";

// MPU6050 Setup
MPU6050 mpu(Wire);
unsigned long timer = 0;

// OLED Setup (page buffer mode = _1_)
U8G2_SH1106_128X64_NONAME_1_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

// Data structure to send
struct GyroData {
  float angleX;
  float angleY;
  float angleZ;
};

void setup() {
  Serial.begin(9600);
  Wire.begin();

  // Initialize OLED
  u8g2.begin();

  // Initialize MPU6050
  byte status = mpu.begin();
  Serial.print(F("MPU6050 status: "));
  Serial.println(status);
  while(status != 0) { } // Stop if MPU6050 fails

  Serial.println(F("Calculating offsets, do not move MPU6050"));
  delay(1000);
  mpu.calcOffsets(); // Gyro calibration
  Serial.println("Done!\n");

  // Show "Device is Ready" message once
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(20, 30, "Device Is Ready");
  } while (u8g2.nextPage());

  unsigned long splashStart = millis();
  while (millis() - splashStart < 5000) {
  // Let the MPU update in background if needed
  mpu.update();
}

  // Initialize radio
  radio.begin();
  radio.openWritingPipe(address);
  radio.setPALevel(RF24_PA_MIN);
  radio.stopListening();
}

void loop() {
  mpu.update();

  if ((millis() - timer) > 20) { // Every 20ms
    GyroData data;
    data.angleX = mpu.getAngleX();
    data.angleY = mpu.getAngleY();
    data.angleZ = mpu.getAngleZ();

    // Send data via nRF24
    bool success = radio.write(&data, sizeof(data));

    // Serial debug output
    Serial.print("X: ");
    Serial.print(data.angleX);
    Serial.print(" Y: ");
    Serial.print(data.angleY);
    Serial.print(" Z: ");
    Serial.print(data.angleZ);
    Serial.print(" Transmission: ");
    Serial.println(success ? "OK" : "Failed");

    // OLED update with gyro data and transmission status
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_6x10_tr); // Small font for fitting more lines

      u8g2.setCursor(0, 12);
      u8g2.print("X: ");
      u8g2.print(data.angleX, 1);

      u8g2.setCursor(0, 24);
      u8g2.print("Y: ");
      u8g2.print(data.angleY, 1);

      u8g2.setCursor(0, 36);
      u8g2.print("Z: ");
      u8g2.print(data.angleZ, 1);

      u8g2.setCursor(0, 48);
      u8g2.print("Transmission: ");
      u8g2.print(success ? "OK" : "Fail");
    } while (u8g2.nextPage());

    timer = millis();
  }
}
